# Copyright 2017 The Openstack-Helm Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ .Values.service_name }}
spec:
  serviceName: "{{ .Values.service_name }}"
{{- if .Values.development.enabled }}
  subscribers: 1
{{- else }}
  subscribers: {{ .Values.subscribers }}
{{- end }}
  template:
    metadata:
      labels:
        app: {{ .Values.service_name }}
        pglogical: enabled
      annotations:
        # alanmeadows: this soft requirement allows single
        # host deployments to spawn several mariadb containers
        # but in a larger environment, would attempt to spread
        # them out
        scheduler.alpha.kubernetes.io/affinity: >
          {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [{
                "labelSelector": {
                  "matchExpressions": [{
                    "key": "app",
                    "operator": "In",
                    "values":["pglogical"]
                  }]
                },
              "topologyKey": "kubernetes.io/hostname",
              "weight": 10
              }]
            }
          }
    spec:
      nodeSelector:
        {{ .Values.labels.node_selector_key }}: {{ .Values.labels.node_selector_value }}
      containers:
        - name: {{ .Values.service_name }}
          image: {{ .Values.images.postgresql }}
          imagePullPolicy: {{ .Values.images.pull_policy }}
          {{- if .Values.resources.enabled }}
          resources:
            limits:
              cpu: {{ .Values.resources.api.limits.cpu | quote }}
              memory: {{ .Values.resources.api.limits.memory | quote }}
            requests:
              cpu: {{ .Values.resources.api.requests.cpu | quote }}
              memory: {{ .Values.resources.api.requests.memory | quote }}
          {{- end }}
          command:
            - bash
            - /tmp/start.sh
          env:
            - name: INTERFACE_NAME
              value: "eth0"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: {{ .Values.network.port.postgresql }}
          # a readinessprobe is a much more complex affair with
          # statefulsets, as the container must be "live"
          # before the next stateful member is created
          readinessProbe:
            exec:
              command:
                - bash
                - /tmp/readiness.sh
            initialDelaySeconds: 60
          volumeMounts:
            - name: peerfinder
              mountPath: /tmp/peer-finder.sh
              subPath: peer-finder.sh
            - name: readiness
              mountPath: /tmp/readiness.sh
              subPath: readiness.sh
            - name: startsh
              mountPath: /tmp/start.sh
              subPath: start.sh
            - name: environment
              mountPath: /etc/postgresql/9.6/main/environment
              subPath: environment
            - name: pgctl
              mountPath: /etc/postgresql/9.6/main/pg_ctl.conf
              subPath: pg_ctl.conf
            - name: pghba
              mountPath: /etc/postgresql/9.6/main/pg_hba.conf
              subPath: pg_hba.conf
            - name: pgident
              mountPath: /etc/postgresql/9.6/main/pg_ident.conf
              subPath: pg_ident.conf
            - name: postgresql
              mountPath: /etc/postgresql/9.6/main/postgresql.conf
              subPath: postgresql.conf
            - name: pgpsql
              mountPath: /tmp/pg.psql
              subPath: pg.psql
            - name: specialsh
              mountPath: /etc/postgresql/9.6/main/special.conf
              subPath: special.conf
            - name: start
              mountPath: /etc/postgresql/9.6/main/start.conf
              subPath: start.conf
            - name: postgresql-data
              mountPath: /var/lib/postgresql
      volumes:
        - name: startsh
          configMap:
            name: postgresql-bin
        - name: peerfinder
          configMap:
            name: postgresql-bin   
        - name: readiness
          configMap:
            name: postgresql-bin 
        - name: environment
          configMap:
            name: postgresql-etc
        - name: pgctl
          configMap:
            name: postgresql-etc
        - name: pghba
          configMap:
            name: postgresql-etc
        - name: pgident
          configMap:
            name: postgresql-etc
        - name: postgresql
          configMap:
            name: postgresql-etc
        - name: pgpsql
          configMap:
            name: postgresql-etc            
        - name: specialsh
          configMap:
            name: postgresql-etc           
        - name: start
          configMap:
            name: postgresql-etc
{{- if .Values.development.enabled }}
        - name: postgresql-data
          hostPath:
            path: {{ .Values.development.storage_path }}
{{- else }}
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
      annotations:
        {{ .Values.volume.class_path }}: {{ .Values.volume.class_name }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.volume.size }}
{{- end }}
